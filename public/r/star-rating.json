{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "star-rating",
  "type": "registry:component",
  "description": "A component that displays ratings with stars and an optional label. This component builds trust with visual feedback.",
  "files": [
    {
      "path": "src/registry/pro-marketing/components/star-rating.tsx",
      "content": "import { Star } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype StarRatingProps = {\r\n  value: number;\r\n  max?: number;\r\n  label?: string;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  alignment?: \"left\" | \"center\" | \"right\";\r\n  /**\r\n   * Precision for partial stars. If set, the component will fill each star\r\n   * proportionally (e.g., 3.2 -> 60% of the 4th star). Defaults to true.\r\n   */\r\n  allowPartial?: boolean;\r\n  containerClassName?: string;\r\n};\r\n\r\nexport function StarRating({\r\n  value,\r\n  max = 5,\r\n  label,\r\n  size = \"lg\",\r\n  alignment = \"center\",\r\n  allowPartial = true,\r\n  className,\r\n  containerClassName,\r\n  ...props\r\n}: StarRatingProps & Omit<React.ComponentProps<\"div\">, \"children\">) {\r\n  const safeMax = Math.max(1, Math.floor(max));\r\n  const clampedValue = Math.max(0, Math.min(value, safeMax));\r\n\r\n  return (\r\n    <div\r\n      data-slot=\"star-rating\"\r\n      className={cn(\r\n        \"flex flex-col items-center gap-1.5\",\r\n        size === \"sm\" && \"[--star-size:calc(--spacing(3.5))]\",\r\n        size === \"md\" && \"[--star-size:calc(--spacing(4))]\",\r\n        size === \"lg\" && \"[--star-size:calc(--spacing(5))]\",\r\n        alignment === \"left\" && \"items-start text-left\",\r\n        alignment === \"center\" && \"items-center text-center\",\r\n        alignment === \"right\" && \"items-end text-right\",\r\n        containerClassName\r\n      )}\r\n      aria-label={`${clampedValue} out of ${safeMax} stars`}\r\n      role=\"img\"\r\n      {...props}\r\n    >\r\n      <div className={cn(\"flex items-center\", className)}>\r\n        {Array.from({ length: safeMax }).map((_, index) => {\r\n          const starIndex = index + 1;\r\n          const filledRatio = allowPartial\r\n            ? Math.max(0, Math.min(1, clampedValue - index))\r\n            : clampedValue >= starIndex\r\n              ? 1\r\n              : 0;\r\n\r\n          return (\r\n            <span key={index} className=\"relative inline-flex\" aria-hidden=\"true\">\r\n              {/* Base (unfilled) star */}\r\n              <Star className=\"size-(--star-size)\" />\r\n              {/* Filled overlay */}\r\n              {filledRatio > 0 ? (\r\n                <span\r\n                  className=\"absolute inset-0 overflow-hidden\"\r\n                  style={{ width: `${filledRatio * 100}%` }}\r\n                >\r\n                  <Star fill=\"currentColor\" className=\"size-(--star-size)\" />\r\n                </span>\r\n              ) : null}\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {label ? (\r\n        <span\r\n          data-slot=\"star-rating-label\"\r\n          className=\"text-muted-foreground font-sans text-xs leading-4 font-normal\"\r\n        >\r\n          {label}\r\n        </span>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "bundle": "pro-marketing"
  }
}